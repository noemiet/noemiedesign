(function($) {
    window.ms_responsiveExtension = function(){
        var self = this;

        var ACTIVE =                'active';
        var ACTIVE_SEL =            '.' + ACTIVE;

        var WRAPPER =               'multiscroll-wrapper';
        var WRAPPER_SEL =           '.' + WRAPPER;

        // util
        var RESPONSIVE =            'ms-responsive';

        // section nav
        var SECTION_NAV =           'multiscroll-nav';
        var SECTION_NAV_SEL =       '#' + SECTION_NAV;

        // section
        var SECTION =               'ms-section';
        var SECTION_SEL =           '.' + SECTION;
        var SECTION_ACTIVE_SEL =    SECTION_SEL + ACTIVE_SEL;

        // common jQuery objects
        var $window = $(window);
        var $document = $(document);
        var $htmlBody = $('html, body');
        var $body = $('body');
        var $panel_left = $('.ms-left');
        var $panel_right = $('.ms-right');

        var multiscroll = $.fn.multiscroll.getMultiscrollData();
        var options = multiscroll.options;
        var internals = multiscroll.internals;

        var windowsHeight = $window.height();
        var previousHeight = windowsHeight;

        self.init = function(){
            //when resizing the site, we adjust the heights of the sections
            $(window)
                .on('resize', resizeHandler)
                .on('scroll', scrollHandler);

            //checking if it needs to get responsive
            responsive();
        };

        self.responsive = responsive;

        //when resizing the site, we adjust the heights of the sections, slimScroll...
        function resizeHandler(){
            //checking if it needs to get responsive
            responsive();

            // rebuild immediately on touch devices
            if (internals.isTouchDevice) {
                var activeElement = $(document.activeElement);

                //if the keyboard is NOT visible
                if (!activeElement.is('textarea') && !activeElement.is('input') && !activeElement.is('select')) {
                    var currentHeight = $window.height();

                    //making sure the change in the viewport size is enough to force a rebuild. (20 % of the window to avoid problems when hidding scroll bars)
                    if( Math.abs(currentHeight - previousHeight) > (20 * Math.max(previousHeight, currentHeight) / 100) ){
                        previousHeight = currentHeight;
                    }
                }
            }
        }

        var lastScroll = 0;
        function scrollHandler(){
            var currentSectionLeft;

            if(!options.autoScrolling){
                var currentScroll = $window.scrollTop();
                var scrollDirection = getScrollDirection(currentScroll);
                var visibleSectionIndex = 0;
                var screen_mid = currentScroll + ($window.height() / 2.0);
                var documentHeight = $body.height() - $window.height();
                var sections =  document.querySelector('.ms-left').querySelectorAll(SECTION_SEL);

                //taking the section which is showing more content in the viewport
                for (var i = 0; i < sections.length; ++i) {
                    var section = sections[i];

                    // Pick the the last section which passes the middle line of the screen.
                    if (section.offsetTop <= screen_mid){
                        visibleSectionIndex = i;
                    }
                }

                //geting the last one, the current one on the screen
                currentSectionLeft = $panel_left.find(SECTION_SEL).eq(visibleSectionIndex);
                var currentSectionRight = $panel_right.find(SECTION_SEL).eq(visibleSectionIndex);

                //setting the visible section as active when manually scrolling
                //executing only once the first time we reach the section
                if(!currentSectionLeft.hasClass(ACTIVE)){
                    var leavingSection = $panel_left.find(SECTION_ACTIVE_SEL);
                    var leavingSectionIndex = leavingSection.index(SECTION_SEL) + 1;
                    var yMovement = internals.getYmovement(currentSectionLeft);
                    var anchorLink  = currentSectionLeft.data('anchor');
                    var sectionIndex = currentSectionLeft.index(SECTION_SEL) + 1;


                    currentSectionLeft.addClass(ACTIVE).siblings().removeClass(ACTIVE);
                    currentSectionRight.addClass(ACTIVE).siblings().removeClass(ACTIVE);

                    $.isFunction( options.onLeave ) && options.onLeave.call( leavingSection, leavingSectionIndex, sectionIndex, yMovement);
                    $.isFunction( options.afterLoad ) && options.afterLoad.call( currentSectionLeft, anchorLink, sectionIndex);

                    internals.activateMenuElement(anchorLink);
                    internals.activateNavDots(anchorLink, leavingSectionIndex);

                    if(options.anchors.length){
                        //needed to enter in hashChange event when using the menu with anchor links
                        internals.setLastScrollDestiny(anchorLink);

                        internals.setURLHash(anchorLink);
                    }
                }
            }
        }

        /**
        * Gets the directon of the the scrolling fired by the scroll event.
        */
        function getScrollDirection(currentScroll){
            var direction = currentScroll > lastScroll ? 'down' : 'up';

            lastScroll = currentScroll;

            //needed for auto-height sections to determine if we want to scroll to the top or bottom of the destination
            previousDestTop = currentScroll;

            return direction;
        }

        /**
        * Checks if the site needs to get responsive and disables autoScrolling if so.
        * A class `fp-responsive` is added to the plugin's container in case the user wants to use it for his own responsive CSS.
        */
        function responsive(){
            var widthLimit = options.responsiveWidth; //backwards compatiblity
            var heightLimit = options.responsiveHeight;

            //only calculating what we need. Remember its called on the resize event.
            var isBreakingPointWidth = widthLimit && $window.outerWidth() < widthLimit;
            var isBreakingPointHeight = heightLimit && $window.height() < heightLimit;

            if(widthLimit && heightLimit){
                setResponsive(isBreakingPointWidth || isBreakingPointHeight);
            }
            else if(widthLimit){
                setResponsive(isBreakingPointWidth);
            }
            else if(heightLimit){
                setResponsive(isBreakingPointHeight);
            }
        }

        /**
        * Turns multiscroll.js to normal scrolling mode when the viewport `width` or `height`
        * are smaller than the set limit values.
        */
        function setResponsive(active){
            var isResponsive = $body.hasClass(RESPONSIVE);

            if(active){
                if(!isResponsive){
                    console.warn("meto 1");
                    setAutoScrolling(false, 'internal');
                    $(SECTION_NAV_SEL).hide();
                    $body.addClass(RESPONSIVE);
                    $.isFunction( options.afterResponsive ) && options.afterResponsive.call( $(WRAPPER_SEL), active);
                }
            }
            else if(isResponsive){
                console.warn("meto 2");
                setAutoScrolling(true, 'internal');
                $(SECTION_NAV_SEL).show();
                $body.removeClass(RESPONSIVE);
                $.isFunction( options.afterResponsive ) && options.afterResponsive.call( $(WRAPPER_SEL), active);
            }
        }

        /**
        * Sets the autoScroll option.
        * It changes the scroll bar visibility and the history of the site as a result.
        */
        function setAutoScrolling(value, type){
            //removing the transformation
            if(!value){
                console.log("quito");
                silentScroll($panel_left, 0);
                silentScroll($panel_right, 0);
            }

            options.autoScrolling = value;

            var elementLeft = $panel_left.find(SECTION_ACTIVE_SEL);
            var elementRight = $panel_right.find(SECTION_ACTIVE_SEL);

            if(options.autoScrolling){
                $htmlBody.css({
                    'overflow' : 'hidden',
                    'height' : '100%'
                });

                options.recordHistory = true;

                //for IE touch devices
                var cssProps = {
                    '-ms-touch-action': 'none',
                    'touch-action': 'none'
                };

                $panel_right.css(cssProps);
                $panel_left.css(cssProps);

                internals.addTouchHandler();
                internals.addMouseWheelHandler();
                $htmlBody.scrollTop(0);
            }
            else{
                $htmlBody.css({
                    'overflow' : 'visible',
                    'height' : 'initial'
                });

                options.recordHistory = false;

                //for IE touch devices
                var cssProps = {
                    '-ms-touch-action': '',
                    'touch-action': ''
                };

                $panel_right.css(cssProps);
                $panel_left.css(cssProps);

                internals.removeTouchHandler();
                internals.removeMouseWheelHandler();
            }

            revertRightSections();

            if(elementLeft.length){
                //moving the container up
                silentScroll($panel_left, elementLeft.position().top);
                silentScroll($panel_right, elementRight.position().top);
            }
        }

        //inverting the right panel
        function revertRightSections(){
            console.log("reverting right...");
            $panel_right.html( $panel_right.find(SECTION_SEL).get().reverse());
        }

        /**
        * Scrolls silently (with no animation) the page to the given Y position.
        */
        function silentScroll(panel, top){
            // The first section can have a negative value in iOS 10. Not quite sure why: -0.0142822265625
            // that's why we round it to 0.
            var roundedTop = Math.round(top);

            if (options.css3 && options.autoScrolling){
                console.log("silentScroll - translate3d");
                internals.transformContainer(panel, 'translate3d(0px, -' + roundedTop + 'px, 0px)', false);
            }
            else if(options.autoScrolling){
                console.log("silentScroll - top");
                panel.css('top', -roundedTop);
            }
            else{
                console.log("silentScroll - scrollTop");
                $htmlBody.scrollTop(roundedTop);
            }
        }
    };
})(jQuery);